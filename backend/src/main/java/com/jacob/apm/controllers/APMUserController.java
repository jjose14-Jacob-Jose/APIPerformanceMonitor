package com.jacob.apm.controllers;

/**
 * This class is generated by referring:
 * https://www.geeksforgeeks.org/spring-boot-3-0-jwt-authentication-with-spring-security-using-mysql-database/#
 */

import com.jacob.apm.constants.MainConstants;
import com.jacob.apm.models.APMUser;
import com.jacob.apm.models.AuthenticationRequest;
import com.jacob.apm.models.UserSignUpRequest;
import com.jacob.apm.services.APMUserService;
import com.jacob.apm.services.JwtService;
import com.jacob.apm.utilities.APMLogger;
import com.jacob.apm.utilities.RecaptchaUtil;
import com.sun.tools.javac.Main;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

@RestController
@RequestMapping("/auth")
public class APMUserController {
    @Autowired
    private APMUserService apmUserService;

    @Autowired
    private JwtService jwtService;

    @Autowired
    private AuthenticationManager authenticationManager;

    @PostMapping("/addNewUser")
    public String addNewUser(@RequestBody UserSignUpRequest userSignUpRequest) {
        return apmUserService.saveUserToDatabase(apmUser);
    }

    @PostMapping("/generateToken")
    public String authenticateAndGetToken(@RequestBody AuthenticationRequest authenticationRequest, HttpServletResponse response) {

//        Validate Google reCaptcha.
        if(! (RecaptchaUtil.validateRecaptcha(authenticationRequest.getGoogleReCaptcha())))
            throw new UsernameNotFoundException("Captcha not complete. ");

        Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authenticationRequest.getUsername(), authenticationRequest.getPassword()));
        if (authentication.isAuthenticated()) {
            String token = jwtService.generateToken(authenticationRequest.getUsername());

            // Set the token as an HTTP-only cookie
            Cookie cookieHttpOnly = new Cookie(MainConstants.COOKIE_HEADER_AUTHORIZATION, token);
            cookieHttpOnly.setHttpOnly(true);
            cookieHttpOnly.setPath("/");
            response.addCookie(cookieHttpOnly);

            Cookie cookieUsername = new Cookie(MainConstants.COOKIE_HEADER_USERNAME, authenticationRequest.getUsername());
            cookieUsername.setMaxAge(MainConstants.DURATION_MILLISECONDS_IN_ONE_HOUR);
            cookieUsername.setPath("/");
            response.addCookie(cookieUsername);

            return "Token generated successfully!";
        } else {
            throw new UsernameNotFoundException("invalid user request !");
        }
    }

    @GetMapping("/logout")
    public ResponseEntity<?> logout(HttpServletRequest request, HttpServletResponse response) {

        String methodNameForLogs = "logout()";
        APMLogger.logMethodEntry(methodNameForLogs);
        try{
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {
                    cookie.setValue("");
                    cookie.setPath("/");
                    cookie.setMaxAge(0);
                    response.addCookie(cookie);
                }
            }
            APMLogger.logInfo(methodNameForLogs + " cleared all cookies");

        } catch (Exception exception) {
            APMLogger.logError(methodNameForLogs, exception);
        }
        return ResponseEntity.status(HttpStatus.FOUND).header("Location", "/").body("");    }

}
