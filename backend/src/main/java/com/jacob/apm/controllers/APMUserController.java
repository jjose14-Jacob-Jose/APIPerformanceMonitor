package com.jacob.apm.controllers;

/**
 * This class is generated by referring:
 * https://www.geeksforgeeks.org/spring-boot-3-0-jwt-authentication-with-spring-security-using-mysql-database/#
 */

import com.jacob.apm.constants.MainConstants;
import com.jacob.apm.models.AuthenticationRequest;
import com.jacob.apm.models.UserSignUpRequest;
import com.jacob.apm.services.APMUserService;
import com.jacob.apm.services.JwtService;
import com.jacob.apm.utilities.APMLogger;
import com.jacob.apm.utilities.RecaptchaUtil;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/auth")
public class APMUserController {
    @Autowired
    private APMUserService apmUserService;

    @Autowired
    private JwtService jwtService;

    @Autowired
    private AuthenticationManager authenticationManager;

    @PostMapping("/addNewUser")
    public ResponseEntity<?> addNewUser(@RequestBody UserSignUpRequest userSignUpRequest) {
        String methodNameForLogging = "addNewUser()";
        APMLogger.logMethodEntry(methodNameForLogging);

        String operationStatus = apmUserService.saveUserToDatabase(userSignUpRequest);

        if (operationStatus.equalsIgnoreCase(MainConstants.MSG_SUCCESS)) {
            APMLogger.logMethodExit(methodNameForLogging);
            return ResponseEntity.status(HttpStatus.ACCEPTED).body(MainConstants.MSG_SUCCESS);
        } else {
            APMLogger.logError(methodNameForLogging);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(MainConstants.MSG_FAILURE);
        }
    }

    @PostMapping("/generateToken")
    public ResponseEntity<?> authenticateAndGetToken(@RequestBody AuthenticationRequest authenticationRequest, HttpServletResponse response) {

//        Validate Google reCaptcha.
        if(! (RecaptchaUtil.validateRecaptcha(authenticationRequest.getGoogleReCaptcha())))
            throw new UsernameNotFoundException("Captcha not complete. ");

        try {
            Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authenticationRequest.getUsername(), authenticationRequest.getPassword()));
            if (authentication.isAuthenticated()) {
                String token = jwtService.generateToken(authenticationRequest.getUsername());

                // Set the token as an HTTP-only cookie
                Cookie cookieHttpOnly = new Cookie(MainConstants.COOKIE_HEADER_AUTHORIZATION, token);
                cookieHttpOnly.setHttpOnly(true);
                cookieHttpOnly.setPath("/");
                response.addCookie(cookieHttpOnly);

                Cookie cookieUsername = new Cookie(MainConstants.COOKIE_HEADER_PREFIX_USERNAME, authenticationRequest.getUsername());
                cookieUsername.setMaxAge(MainConstants.DURATION_MILLISECONDS_IN_ONE_HOUR);
                cookieUsername.setPath("/");
                response.addCookie(cookieUsername);

                return ResponseEntity.status(HttpStatus.OK).body(MainConstants.MSG_SUCCESS);
            }
        }catch (Exception exception) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(exception);
        }

        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid credentials");
    }

    @GetMapping("/logout")
    public ResponseEntity<?> logout(HttpServletRequest request, HttpServletResponse response) {

        String methodNameForLogs = "logout()";
        APMLogger.logMethodEntry(methodNameForLogs);
        try{
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {
                    cookie.setValue("");
                    cookie.setPath("/");
                    cookie.setMaxAge(0);
                    response.addCookie(cookie);
                }
            }
            APMLogger.logInfo(methodNameForLogs + " cleared all cookies");

        } catch (Exception exception) {
            APMLogger.logError(methodNameForLogs, exception);
        }
        return ResponseEntity.status(HttpStatus.FOUND).header("Location", "/").body("");    }

}
